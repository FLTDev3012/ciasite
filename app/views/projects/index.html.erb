<div class="pass-nav-block-blanc"></div>

<div class="projects-div-container">

  <div class="projects-div-content">

    <div class="project-first-div">

      <div class="project-first-gauche">

        <div class="home-quatre-title">
          <h2 class="text-main-title">Projects</h2>
        </div>

        <div class="ns-first-gauche-block-border-left-red">
          <p class="text-bold">Unlock Horizons Collection</p>
          <p class="text-lighty">Explore my latest web creations, showcasing tailored solutions adapted to various contexts and specific needs. These examples will give you a concrete idea of what can be achieved.</p>

          <div class="link-ligne-rouge-container">
            <div class="link-ligne-rouge-red"></div>
            <a href="#projects-project" class="text-bold" data-turbo="false">Explore All Projects</a>
          </div>
        </div>

        <div class="project-div-vide-pour-ligne"></div>

      </div>

      <div class="project-first-droite">

        <div id="scene-container"></div>

        <div class="link-ligne-rouge-container">
          <div class="link-ligne-rouge-red"></div>
          <a href="#projects-project" class="text-bold" data-turbo="false">Explore All Projects</a>
        </div>

      </div>

      <div class="ns-fist-arrow-container" id="projects-project">
        <i class="fa-solid fa-caret-down" style="color: #e21a41;"></i>
      </div>

    </div>



    <div class="projects-grid">


      <% @projects.each do |project| %>

        <%= link_to project_path(project) do %>
          <div class="home-quatre-article">

            <div class="home-quatre-picture">
              <div class="picture">

                <% if project.photo.attached? %>
                  <%= cl_image_tag(project.photo.key, loading: "eager", fetchpriority: "high") %>
                <% else %>
                  <%= image_tag("proj_img/pro_merli.png", loading: "eager", fetchpriority: "high") %>
                <% end %>

              </div>
            </div>

            <div class="home-quatre-article-title">
              <h2 class="text-article-bold"><%= project.title %></h2>
            </div>

            <div class="home-quatre-article-link">
              <div class="home-quatre-link-text">
                <p class="text-article-link">Watch Video</p>
              </div>
              <div class="home-quatre-link-arrow">
                <i class="fa-solid fa-arrow-right"></i>
              </div>
            </div>

          </div>
        <% end %>

      <% end %>

    </div>




  </div>
</div>


<div class="home-cinq-div-container">
  <div class="home-cinq-div-content">

    <%= render "shared/lignesverticales" %>

    <div class="home-cinq-container">
      <div class="home-cinq-content">


        <div class="home-cinq-gauche-grand">
          <div class="home-cinq-gauche-petit">
            <div class="home-cinq-gauche-text">
              <h2>My services</h2>
              <p>Curious about the types of websites I offer and which one best suits your needs? Explore our range of services, from single-page designs to fully customized web applications, and discover the ideal solution for your project.</p>


              <%= link_to nosservices_path, class: "btn-rouge js-home-fifth-button", data: { turbo: false } do %>
                <div class="block-rouge"></div>
                <div class="block-noir-fleche"><i class="fa-solid fa-arrow-right" style="color: #fff;"></i></div>
                <div class="block-text">See the Services</div>
              <% end %>


            </div>
          </div>
        </div>

        <div class="home-cinq-droite">
          <div class="home-cinq-droite-pic"><%= image_tag("world.png") %></div>
        </div>


      </div>
    </div>

  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

<script>

  let scene, camera, renderer, particles;

  function init() {
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, window.innerHeight / window.innerHeight, 0.1, 1000);
    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerHeight, window.innerHeight);
    document.getElementById('scene-container').appendChild(renderer.domElement);
    renderer.setClearColor(0x000000, 0);  // Opacité à 0 pour la transparence

    camera.position.z = 100;

    createParticles();
    createImageSprite();  // Appel à la fonction pour intégrer l'image

    window.addEventListener('resize', onWindowResize, false);

    animate();
  }

  // Fonction pour créer les particules de la sphère
  function createParticles() {
    const geometry = new THREE.BufferGeometry();
    const vertices = [];
    const colors = [];
    const particleCount = 5000;

    for (let i = 0; i < particleCount; i++) {
      const theta = Math.random() * Math.PI * 2;
      const phi = Math.acos(2 * Math.random() - 1);
      const radius = 55;

      const x = radius * Math.sin(phi) * Math.cos(theta);
      const y = radius * Math.sin(phi) * Math.sin(theta);
      const z = radius * Math.cos(phi);

      vertices.push(x, y, z);

      // Choisir un ratio pour interpoler entre les couleurs
      const t = Math.random();

      // Définir les trois couleurs
      const color1 = { r: 255 / 255, g: 255 / 255, b: 255 / 255 }; // Blanc
      const color2 = { r: 226 / 255, g: 26 / 255, b: 65 / 255 };   // Rouge
      const color3 = { r: 22 / 255, g: 22 / 255, b: 24 / 255 };    // Gris foncé

      // Interpolation entre les couleurs
      let r, g, b;
      if (t < 0.5) {
        const mix = t / 0.5;
        r = color1.r * (1 - mix) + color2.r * mix;
        g = color1.g * (1 - mix) + color2.g * mix;
        b = color1.b * (1 - mix) + color2.b * mix;
      } else {
        const mix = (t - 0.5) / 0.5;
        r = color2.r * (1 - mix) + color3.r * mix;
        g = color2.g * (1 - mix) + color3.g * mix;
        b = color2.b * (1 - mix) + color3.b * mix;
      }

      colors.push(r, g, b);
    }

    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));

    const material = new THREE.ShaderMaterial({
      transparent: true,
      uniforms: {
        time: { value: 0 }
      },
      vertexShader: `
        attribute vec3 color;
        varying vec3 vColor;
        varying vec3 vPosition;
        uniform float time;
        void main() {
          vColor = color;
          vPosition = position;
          vec3 pos = position;
          float angle = time * 0.2;
          pos.x = position.x * cos(angle) - position.z * sin(angle);
          pos.z = position.x * sin(angle) + position.z * cos(angle);
          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
          gl_PointSize = 3.0;
        }
      `,
      fragmentShader: `
        varying vec3 vColor;
        varying vec3 vPosition;
        uniform float time;
        void main() {
          vec3 waveNormal = normalize(vec3(cos(time), sin(time), 0.5));
          float dotProduct = dot(normalize(vPosition), waveNormal);
          float opacity = smoothstep(0.8, 0.9, 1.0 - dotProduct);
          if (opacity < 0.1) discard;
          vec3 color = vColor;
          color *= 0.5 + 0.5 * sin(time + vColor.r * 10.0 + vColor.g * 5.0 + vColor.b * 2.0);
          gl_FragColor = vec4(color, opacity);
        }
      `
    });

    particles = new THREE.Points(geometry, material);
    scene.add(particles);
  }

  // Fonction pour créer et ajouter le Sprite de l'image
  function createImageSprite() {
    const textureLoader = new THREE.TextureLoader();
    const texture = textureLoader.load("<%= asset_path('proj_img/project_main_img.png', loading: "eager", fetchpriority: "high") %>"); // Remplace par le chemin de ton image

    const spriteMaterial = new THREE.SpriteMaterial({
      map: texture,
      transparent: true,
      opacity: 1  // Modifie cette valeur entre 0 (transparent) et 1 (opaque)
    });

    const sprite = new THREE.Sprite(spriteMaterial);

    sprite.scale.set(80, 80, 1);
    sprite.position.set(0, 0, 0);


    scene.add(sprite);
  }

  function animate() {
    requestAnimationFrame(animate);

    const time = performance.now() * 0.001;
    particles.material.uniforms.time.value = time;

    renderer.render(scene, camera);
  }

  function onWindowResize() {
    camera.aspect = window.innerHeight / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerHeight, window.innerHeight);
  }

  init();

</script>
