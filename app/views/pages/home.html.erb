

<div class="home-over-nav">
  <div class="home-first-degrader-haut-rouge"></div>
</div>


<div class="home-container">


  <!-- mouse follow -->

  <div class="mouse-follower-container">
    <div class="circle"></div>
    <div class="circle"></div>
    <div class="circle"></div>
    <div class="circle"></div>
    <div class="circle"></div>
    <div class="circle"></div>
    <div class="circle"></div>
    <div class="circle"></div>
    <div class="circle"></div>
    <div class="circle"></div>
  </div>

  <!--
  <svg xmlns="http://www.w3.org/2000/svg" xml:lang="en"
  xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 500 500">
      <title>Circular Text Path</title>

      <defs>
          <path id="textcircle"
              d="M250,400
                  a150,150 0 0,1 0,-300a150,150 0 0,1 0,300Z"
              transform="rotate(12,250,250)"/>
      </defs>
      <rect width="100%" height="100%" fill="none" />
      <text>
          <textPath xlink:href="#textcircle"
                  aria-label="All for One &amp; One for All"
                  textLength="850">UNLOCK - YOUR - HORIZONS - </textPath>

      </text>

  </svg>
  -->

  <%= render "home/homefirst" %>
  <%= render "home/homesecond" %>
  <%= render "home/homethird" %>
  <%= render "home/homefourth" %>
  <%= render "home/homefifth" %>

</div>


<!-- script mouse follower -->
<script>
  const coords = { x: 0, y: 0, scrollY: 0 };
  const circles = document.querySelectorAll(".circle");

  const colors = [
    "#e21a41", "#e21a41", "#e21a41", "#e21a41", "#e21a41", "#e21a41", "#e21a41", "#e21a41", "#e21a41", "#e21a41"
  ];

  let containerX = 0;
  let containerY = 0;

  // Initialisation des cercles avec leurs couleurs et positions
  circles.forEach(function (circle, index) {
    circle.x = 0;
    circle.y = 0;
    circle.style.backgroundColor = colors[index % colors.length];
  });

  // Suivi de la position de la souris
  window.addEventListener("mousemove", function (e) {
    coords.x = e.clientX;
    coords.y = e.clientY;
  });

  // Suivi du défilement (scroll)
  window.addEventListener("scroll", function () {
    coords.scrollY = window.scrollY;
  });

  // Animation des cercles
  function animateCircles() {
    // Ralentir le déplacement global du conteneur
    containerX += (coords.x - containerX) * 0.1; // Ajuster ce facteur pour plus ou moins de lenteur
    containerY += (coords.y + coords.scrollY - containerY) * 0.1;

    let x = containerX;
    let y = containerY;

    circles.forEach(function (circle, index) {
      circle.style.left = x - 9 + "px";
      circle.style.top = y - 9 + "px";

      // Garder le comportement fluide des cercles
      circle.style.scale = (circles.length - index) / circles.length;

      circle.x = x;
      circle.y = y;

      const nextCircle = circles[index + 1] || circles[0];
      x += (nextCircle.x - x) * 0.3;
      y += (nextCircle.y - y) * 0.3;
    });

    requestAnimationFrame(animateCircles);
  }

  animateCircles();
</script>

<!--
<script>

  document.addEventListener("turbo:load", function() {
    const circleSvg = document.querySelector('svg');
    const btn = document.querySelector('button');

    let mouseX = 0;
    let mouseY = 0;
    let scrollY = 0;

    window.addEventListener('mousemove', (event) => {
      mouseY = (event.clientY) - 45;
      mouseX = (event.clientX) - 45;
    });

    window.addEventListener('scroll', (event) => {
      scrollY = window.scrollY;
    });

    const mouseMove = () => {
      circleSvg.style.top = mouseY + scrollY + 'px';
      circleSvg.style.left = mouseX + 'px';
      window.requestAnimationFrame(mouseMove);
    };

    mouseMove();

    var tl = gsap.timeline({defaults: {ease: "power2.inOut"}});
    tl.to(circleSvg, {width: 0, opacity: 0});
    tl.to('body, button', {background: 'white'});
    tl.pause();

    btn.addEventListener('click', () => {
      tl.play();
    });
  });

</script>
-->
