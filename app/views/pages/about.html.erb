

<div class="pass-nav-block-noir"></div>


<!-- about page HTML -->

<div class="about-container">

  <!-- landing page ------------------------------------ -->

  <div class="ns-container">

    <div class="imagevague-container">
      <%= image_tag("lignevague.png", class: "imagevague") %>
    </div>

    <div class="ns-content">

      <div class="ns-first">

        <div class="ns-traits-container">
          <div class="ns-trait"></div>
          <div class="ns-trait"></div>
          <div class="ns-trait"></div>
          <div class="ns-trait"></div>
          <div class="ns-trait"></div>
        </div>

        <div class="ns-first-gauche">
          <div class="ns-first-droite-content">
            <h2 class="text-main-title">Contact</h2>

            <div class="ns-first-gauche-block-border-left-red">
              <p class="text-bold">Fiolet Dorian - Web Developer ðŸ‡«ðŸ‡· ðŸ‡¦ðŸ‡º</p>
              <p class="text-lighty">Graduated from a French school in web development, I have gained solid expertise in creating websites and web applications. As a freelancer, I split my time between Australia and France, where I bring my passion and skills to help clients develop tailored digital solutions.</p>

              <div class="ns-first-phone-img">
                <div class="ns-first-logo"><%= image_tag("pp.jpg", loading: "eager", fetchpriority: "high") %></div>
              </div>

              <div class="about-main-link-container">

                <div class="link-ligne-rouge-container">
                  <div class="link-ligne-rouge-red"></div>
                  <a href="#email" class="text-bold">E-mail</a>
                </div>

                <div class="link-ligne-rouge-container">
                  <div class="link-ligne-rouge-red"></div>
                  <%= link_to 'LinkedIn', 'https://www.linkedin.com/in/dorian-fiolet-006428255', target: '_blank', class: 'text-bold' %>
                </div>

                <div class="link-ligne-rouge-container">
                  <div class="link-ligne-rouge-red"></div>
                  <%= link_to 'Github', 'https://github.com/FLTDev3012', target: '_blank', class: 'text-bold' %>
                </div>

              </div>

            </div>

          </div>
        </div>

        <div class="ns-first-droite">
          <div class="ns-first-logo"><%= image_tag("pp.jpg") %></div>
        </div>

      </div>

    </div>

    <div class="ns-fist-arrow-container" id="email">
      <i class="fa-solid fa-caret-down" style="color: #e21a41;"></i>
    </div>

  </div>




  <!-- form  -->
  <div class="about-form-container">
    <div class="about-form-content">

      <div class="about-form-gauche">
        <h2 class="text-title">Contact Me</h2>

        <% if flash[:alert] %>
          <div class="alert alert-danger">
            <%= flash[:alert] %>
          </div>
        <% end %>

        <% if @contact && @contact.errors.any? %>
          <div class="alert alert-danger">
            <h4>There were some errors:</h4>
            <ul>
              <% @contact.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        <% end %>

        <%= form_with url: '/send_contact', local: true do |f| %>
          <div class="form-group">
            <%= f.label :name, "Full Name", class: "text-light" %>
            <%= f.text_field :name, placeholder: "Full name", class: "form-control", required: true, id: "form-full-name" %>
          </div>

          <div class="form-group">
            <%= f.label :email, "Email Address", class: "text-light" %>
            <%= f.email_field :email, placeholder: "your@email.com", class: "form-control", required: true, id: "form-email" %>
          </div>

          <div class="form-group">
            <%= f.label :phone, "Phone Contact", class: "text-light" %>
            <%= f.text_field :phone, placeholder: "0412345678", class: "form-control", required: true, id: "form-phone" %>
          </div>

          <div class="form-group">
            <%= f.label :message, "Your Message", class: "text-light" %>
            <%= f.text_area :message, placeholder: "Enter your message", class: "form-control", required: true, id: "form-message" %>
          </div>

          <div class="form-group">
            <button type="submit" class="btn-rouge js-home-fifth-button">
              <div class="block-rouge"></div>
              <div class="block-noir-fleche"><i class="fa-solid fa-arrow-right" style="color: #fff;"></i></div>
              <div class="block-text">Send</div>
            </button>
          </div>
        <% end %>
      </div>

      <div class="about-form-droite">

        <div class="scene">
          <div class="rocket">
            <%= image_tag("rocketdeux.png") %>
          </div>
        </div>

        <div class="text-etoile-container">

          <p class="text-lighty">"The best way to predict the future is to create it."</p>
          <div id="scene-container"></div>
        </div>

      </div>

    </div>
  </div>

  <!-- end form  -->


</div>




<script>
  function stars() {
    let count = 50;
    let scene = document.querySelector(".scene");

    let i = 0;
    while (i < count) {
      let star = document.createElement("i");
      let x = Math.floor(Math.random() * window.innerWidth);

      let duration = Math.random() * 1;
      let h = Math.random() * 100;

      star.style.left = x + "px";
      star.style.width = 1 + "px";
      star.style.height = 50 + h + "px";
      star.style.animationDuration = duration + "s";

      scene.appendChild(star);
      i++;
    }
  }
  stars();
</script>


<script>
  document.addEventListener("DOMContentLoaded", function() {
    const nameInput = document.getElementById("form-full-name");
    const emailInput = document.getElementById("form-email");
    const phoneInput = document.getElementById("form-phone");
    const messageInput = document.getElementById("form-message");
    const rocket = document.querySelector(".rocket");
    const scene = document.querySelector(".scene");
    let depart = 0;

    // Tableau pour suivre les champs remplis
    const filledFields = {
      name: false,
      email: false,
      phone: false,
      message: false
    };

    function updateRocketAnimation() {
      rocket.classList.remove("animated-rocket", "email-filled", "phone-filled");
      scene.classList.remove("message-filled");

      if (depart === 0) {
        // Rien Ã  faire
      } else if (depart === 1) {
        rocket.classList.add("animated-rocket");
      } else if (depart === 2) {
        rocket.classList.add("animated-rocket", "email-filled");
      } else if (depart === 3) {
        rocket.classList.add("animated-rocket", "email-filled", "phone-filled");
      } else if (depart === 4) {
        rocket.classList.add("animated-rocket", "email-filled", "phone-filled");
        scene.classList.add("message-filled");
      }
    }

    function handleInputChange(input, fieldName) {
      if (input.value.trim() !== "" && !filledFields[fieldName]) {
        filledFields[fieldName] = true; // Marquer le champ comme rempli
        depart++;
      } else if (input.value.trim() === "" && filledFields[fieldName]) {
        filledFields[fieldName] = false; // Marquer le champ comme vide
        depart--;
      }
      updateRocketAnimation();
    }

    nameInput.addEventListener("input", function() {
      handleInputChange(nameInput, 'name');
    });

    emailInput.addEventListener("input", function() {
      handleInputChange(emailInput, 'email');
    });

    phoneInput.addEventListener("input", function() {
      handleInputChange(phoneInput, 'phone');
    });

    messageInput.addEventListener("input", function() {
      handleInputChange(messageInput, 'message');
    });
  });
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

<script>
  let scene, camera, renderer, particles;

  function init() {
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.getElementById('scene-container').appendChild(renderer.domElement);
    // Suppression de la couleur de fond (rend le fond transparent)
    renderer.setClearColor(0x000000, 0);  // OpacitÃ© Ã  0 pour la transparence

    camera.position.z = 100;

    createParticles();

    window.addEventListener('resize', onWindowResize, false);

    animate();
  }

  function createParticles() {
    const geometry = new THREE.BufferGeometry();
    const vertices = [];
    const colors = [];
    const particleCount = 5000;

    for (let i = 0; i < particleCount; i++) {
      const theta = Math.random() * Math.PI * 2;
      const phi = Math.acos(2 * Math.random() - 1);
      const radius = 50;

      const x = radius * Math.sin(phi) * Math.cos(theta);
      const y = radius * Math.sin(phi) * Math.sin(theta);
      const z = radius * Math.cos(phi);

      vertices.push(x, y, z);

      // Choisir un ratio pour interpoler entre les couleurs
      const t = Math.random(); // Valeur entre 0 et 1

      // DÃ©finir les trois couleurs
      const color1 = { r: 255 / 255, g: 255 / 255, b: 255 / 255 }; // Blanc (#fff)
      const color2 = { r: 226 / 255, g: 26 / 255, b: 65 / 255 };   // Rouge (#e21a41)
      const color3 = { r: 22 / 255, g: 22 / 255, b: 24 / 255 };    // Gris foncÃ© (#161618)

      // Interpolation entre les trois couleurs
      let r, g, b;

      if (t < 0.5) {
        // Interpolation entre color1 et color2
        const mix = t / 0.5;
        r = color1.r * (1 - mix) + color2.r * mix;
        g = color1.g * (1 - mix) + color2.g * mix;
        b = color1.b * (1 - mix) + color2.b * mix;
      } else {
        // Interpolation entre color2 et color3
        const mix = (t - 0.5) / 0.5;
        r = color2.r * (1 - mix) + color3.r * mix;
        g = color2.g * (1 - mix) + color3.g * mix;
        b = color2.b * (1 - mix) + color3.b * mix;
      }

      colors.push(r, g, b);
    }

    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));

    const material = new THREE.ShaderMaterial({
      transparent: true,
      uniforms: {
        time: { value: 0 }
      },
      vertexShader: `
        attribute vec3 color;
        varying vec3 vColor;
        varying vec3 vPosition;
        uniform float time;
        void main() {
          vColor = color;
          vPosition = position;
          vec3 pos = position;
          float angle = time * 0.2;
          pos.x = position.x * cos(angle) - position.z * sin(angle);
          pos.z = position.x * sin(angle) + position.z * cos(angle);
          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
          gl_PointSize = 3.0;
        }
      `,
      fragmentShader: `
        varying vec3 vColor;
        varying vec3 vPosition;
        uniform float time;
        void main() {
          vec3 waveNormal = normalize(vec3(cos(time), sin(time), 0.5));
          float dotProduct = dot(normalize(vPosition), waveNormal);
          float opacity = smoothstep(0.8, 0.9, 1.0 - dotProduct);
          if (opacity < 0.1) discard;
          vec3 color = vColor;
          color *= 0.5 + 0.5 * sin(time + vColor.r * 10.0 + vColor.g * 5.0 + vColor.b * 2.0);
          gl_FragColor = vec4(color, opacity);
        }
      `
    });

    particles = new THREE.Points(geometry, material);
    scene.add(particles);
  }

  function animate() {
    requestAnimationFrame(animate);

    const time = performance.now() * 0.001;
    particles.material.uniforms.time.value = time;

    renderer.render(scene, camera);
  }

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  }

  init();
</script>
